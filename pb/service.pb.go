// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

package pb

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 131 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x4e,
	0x4c, 0xc9, 0xcd, 0xcc, 0x83, 0x08, 0x18, 0x85, 0x70, 0xb1, 0xf8, 0xe5, 0xa7, 0xa4, 0x0a, 0x29,
	0x70, 0xb1, 0x38, 0x96, 0x96, 0x64, 0x08, 0x71, 0xeb, 0x15, 0x24, 0xe9, 0x81, 0x58, 0x41, 0xa9,
	0x85, 0x52, 0x70, 0x8e, 0x63, 0x72, 0xb6, 0x90, 0x16, 0x17, 0x97, 0x63, 0x4e, 0x79, 0x62, 0x65,
	0x31, 0x7e, 0x75, 0x1a, 0x8c, 0x06, 0x8c, 0x4e, 0x62, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0x2c, 0x7a, 0xd6, 0x05, 0x49,
	0x49, 0x6c, 0x60, 0x4b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51, 0x5a, 0x51, 0x43, 0x96,
	0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NodeClient is the client API for Node service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeClient interface {
	Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthAck, error)
	AlwaysAuth(ctx context.Context, opts ...grpc.CallOption) (Node_AlwaysAuthClient, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Auth(ctx context.Context, in *AuthReq, opts ...grpc.CallOption) (*AuthAck, error) {
	out := new(AuthAck)
	err := c.cc.Invoke(ctx, "/pb.Node/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) AlwaysAuth(ctx context.Context, opts ...grpc.CallOption) (Node_AlwaysAuthClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Node_serviceDesc.Streams[0], "/pb.Node/AlwaysAuth", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeAlwaysAuthClient{stream}
	return x, nil
}

type Node_AlwaysAuthClient interface {
	Send(*AuthReq) error
	Recv() (*AuthAck, error)
	grpc.ClientStream
}

type nodeAlwaysAuthClient struct {
	grpc.ClientStream
}

func (x *nodeAlwaysAuthClient) Send(m *AuthReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeAlwaysAuthClient) Recv() (*AuthAck, error) {
	m := new(AuthAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeServer is the server API for Node service.
type NodeServer interface {
	Auth(context.Context, *AuthReq) (*AuthAck, error)
	AlwaysAuth(Node_AlwaysAuthServer) error
}

// UnimplementedNodeServer can be embedded to have forward compatible implementations.
type UnimplementedNodeServer struct {
}

func (*UnimplementedNodeServer) Auth(ctx context.Context, req *AuthReq) (*AuthAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedNodeServer) AlwaysAuth(srv Node_AlwaysAuthServer) error {
	return status.Errorf(codes.Unimplemented, "method AlwaysAuth not implemented")
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Node/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Auth(ctx, req.(*AuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_AlwaysAuth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).AlwaysAuth(&nodeAlwaysAuthServer{stream})
}

type Node_AlwaysAuthServer interface {
	Send(*AuthAck) error
	Recv() (*AuthReq, error)
	grpc.ServerStream
}

type nodeAlwaysAuthServer struct {
	grpc.ServerStream
}

func (x *nodeAlwaysAuthServer) Send(m *AuthAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeAlwaysAuthServer) Recv() (*AuthReq, error) {
	m := new(AuthReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Node_Auth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AlwaysAuth",
			Handler:       _Node_AlwaysAuth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
